// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

    import BN = require('bn.js');
    import { encodeMethod, decodeParams } from 'ethjs-abi';
    import { AbiFunction } from 'ethereum';
    import { AccountManager } from './AccountManager';
    import { Connector } from './Connector';

    /**
     * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a localy version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
     */

    export class Contract {
        protected readonly connector: Connector;
        protected readonly accountManager: AccountManager;
        public readonly address: string;
        protected readonly defaultGasPrice: BN;

        protected constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            this.connector = connector;
            this.accountManager = accountManager;
            this.address = address;
            this.defaultGasPrice = defaultGasPrice;
        }

        protected async localCall(abi: AbiFunction, parameters: Array<any>, sender?: string, attachedEth?: BN): Promise<Array<any>> {
            const from = sender || this.accountManager.defaultAddress;
            const data = encodeMethod(abi, parameters);
            const transaction = Object.assign({ from: from, to: this.address, data: data }, attachedEth ? { value: attachedEth } : {});
            const result = await this.connector.ethjsQuery.call(transaction);
            return decodeParams(abi.outputs.map(x => x.name), abi.outputs.map(x => x.type), result);
        }

        protected async remoteCall(abi: AbiFunction, parameters: Array<any>, txName: String, sender?: string, gasPrice?: BN, attachedEth?: BN): Promise<void> {
            const from = sender || this.accountManager.defaultAddress;
            const data = encodeMethod(abi, parameters);
            let gas = await this.connector.ethjsQuery.estimateGas(Object.assign({ to: this.address, from: from, data: data }, attachedEth ? { value: attachedEth } : {} ));
            // This is to address an observed bug while running against geth where occasionally gas estimates are lower than required: https://github.com/ethereum/go-ethereum/issues/15896
            gas = BN.min(new BN(6950000), gas.add(gas.div(new BN(10))));
            gasPrice = gasPrice || this.defaultGasPrice;
            const transaction = Object.assign({ from: from, to: this.address, data: data, gasPrice: gasPrice, gas: gas }, attachedEth ? { value: attachedEth } : {});
            const signedTransaction = await this.accountManager.signTransaction(transaction);
            const transactionHash = await this.connector.ethjsQuery.sendRawTransaction(signedTransaction);
            const txReceipt = await this.connector.waitForTransactionReceipt(transactionHash, `Waiting on receipt for tx: ${txName}`);
            if (txReceipt.status != 1) {
                throw new Error(`Tx ${txName} failed: ${txReceipt}`);
            }
        }
    }

    
    export class Controlled extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }
    }


    export class AugurLite extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public createUniverse = async(denominationToken: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IBEP20","name":"_denominationToken","type":"address"}],"name":"createUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [denominationToken], "createUniverse", options.sender, options.gasPrice);
            return;
        }

        public createUniverse_ = async(denominationToken: string, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IBEP20","name":"_denominationToken","type":"address"}],"name":"createUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [denominationToken], options.sender);
            return <string>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public isKnownUniverse_ = async(universe: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"isKnownUniverse","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [universe], options.sender);
            return <boolean>result[0];
        }

        public logCompleteSetsPurchased = async(universe: string, market: string, account: string, numCompleteSets: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, market, account, numCompleteSets], "logCompleteSetsPurchased", options.sender, options.gasPrice);
            return;
        }

        public logCompleteSetsPurchased_ = async(universe: string, market: string, account: string, numCompleteSets: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, market, account, numCompleteSets], options.sender);
            return <boolean>result[0];
        }

        public logCompleteSetsSold = async(universe: string, market: string, account: string, numCompleteSets: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, market, account, numCompleteSets], "logCompleteSetsSold", options.sender, options.gasPrice);
            return;
        }

        public logCompleteSetsSold_ = async(universe: string, market: string, account: string, numCompleteSets: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, market, account, numCompleteSets], options.sender);
            return <boolean>result[0];
        }

        public logEscapeHatchChanged = async(isOn: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_isOn","type":"bool"}],"name":"logEscapeHatchChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [isOn], "logEscapeHatchChanged", options.sender, options.gasPrice);
            return;
        }

        public logEscapeHatchChanged_ = async(isOn: boolean, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_isOn","type":"bool"}],"name":"logEscapeHatchChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [isOn], options.sender);
            return <boolean>result[0];
        }

        public logMarketCreated = async(topic: string, description: string, extraInfo: string, universe: string, market: string, marketCreator: string, outcomes: Array<string>, minPrice: BN, maxPrice: BN, marketType: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"},{"internalType":"int256","name":"_minPrice","type":"int256"},{"internalType":"int256","name":"_maxPrice","type":"int256"},{"internalType":"enum IMarket.MarketType","name":"_marketType","type":"uint8"}],"name":"logMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [topic, description, extraInfo, universe, market, marketCreator, outcomes, minPrice, maxPrice, marketType], "logMarketCreated", options.sender, options.gasPrice);
            return;
        }

        public logMarketCreated_ = async(topic: string, description: string, extraInfo: string, universe: string, market: string, marketCreator: string, outcomes: Array<string>, minPrice: BN, maxPrice: BN, marketType: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"},{"internalType":"int256","name":"_minPrice","type":"int256"},{"internalType":"int256","name":"_maxPrice","type":"int256"},{"internalType":"enum IMarket.MarketType","name":"_marketType","type":"uint8"}],"name":"logMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [topic, description, extraInfo, universe, market, marketCreator, outcomes, minPrice, maxPrice, marketType], options.sender);
            return <boolean>result[0];
        }

        public logMarketMailboxTransferred = async(universe: string, market: string, from: string, to: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketMailboxTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, market, from, to], "logMarketMailboxTransferred", options.sender, options.gasPrice);
            return;
        }

        public logMarketMailboxTransferred_ = async(universe: string, market: string, from: string, to: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketMailboxTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, market, from, to], options.sender);
            return <boolean>result[0];
        }

        public logMarketResolved = async(universe: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"logMarketResolved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe], "logMarketResolved", options.sender, options.gasPrice);
            return;
        }

        public logMarketResolved_ = async(universe: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"logMarketResolved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe], options.sender);
            return <boolean>result[0];
        }

        public logMarketTransferred = async(universe: string, from: string, to: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, from, to], "logMarketTransferred", options.sender, options.gasPrice);
            return;
        }

        public logMarketTransferred_ = async(universe: string, from: string, to: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, from, to], options.sender);
            return <boolean>result[0];
        }

        public logShareTokenBurned = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"logShareTokenBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, target, amount], "logShareTokenBurned", options.sender, options.gasPrice);
            return;
        }

        public logShareTokenBurned_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"logShareTokenBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, target, amount], options.sender);
            return <boolean>result[0];
        }

        public logShareTokenMinted = async(universe: string, target: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"logShareTokenMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, target, amount], "logShareTokenMinted", options.sender, options.gasPrice);
            return;
        }

        public logShareTokenMinted_ = async(universe: string, target: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"logShareTokenMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, target, amount], options.sender);
            return <boolean>result[0];
        }

        public logShareTokensCreated = async(shareTokens: Array<string>, market: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IShareToken[]","name":"_shareTokens","type":"address[]"},{"internalType":"address","name":"_market","type":"address"}],"name":"logShareTokensCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [shareTokens, market], "logShareTokensCreated", options.sender, options.gasPrice);
            return;
        }

        public logShareTokensCreated_ = async(shareTokens: Array<string>, market: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IShareToken[]","name":"_shareTokens","type":"address[]"},{"internalType":"address","name":"_market","type":"address"}],"name":"logShareTokensCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [shareTokens, market], options.sender);
            return <boolean>result[0];
        }

        public logShareTokensTransferred = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"logShareTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, from, to, value], "logShareTokensTransferred", options.sender, options.gasPrice);
            return;
        }

        public logShareTokensTransferred_ = async(universe: string, from: string, to: string, value: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"logShareTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, from, to, value], options.sender);
            return <boolean>result[0];
        }

        public logTimestampSet = async(newTimestamp: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [newTimestamp], "logTimestampSet", options.sender, options.gasPrice);
            return;
        }

        public logTimestampSet_ = async(newTimestamp: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [newTimestamp], options.sender);
            return <boolean>result[0];
        }

        public logTradingProceedsClaimed = async(universe: string, shareToken: string, sender: string, market: string, numShares: BN, numPayoutTokens: BN, finalTokenBalance: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_shareToken","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_numShares","type":"uint256"},{"internalType":"uint256","name":"_numPayoutTokens","type":"uint256"},{"internalType":"uint256","name":"_finalTokenBalance","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, shareToken, sender, market, numShares, numPayoutTokens, finalTokenBalance], "logTradingProceedsClaimed", options.sender, options.gasPrice);
            return;
        }

        public logTradingProceedsClaimed_ = async(universe: string, shareToken: string, sender: string, market: string, numShares: BN, numPayoutTokens: BN, finalTokenBalance: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_shareToken","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_numShares","type":"uint256"},{"internalType":"uint256","name":"_numPayoutTokens","type":"uint256"},{"internalType":"uint256","name":"_finalTokenBalance","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, shareToken, sender, market, numShares, numPayoutTokens, finalTokenBalance], options.sender);
            return <boolean>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }

        public trustedTransfer = async(token: string, from: string, to: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IBEP20","name":"_token","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"trustedTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [token, from, to, amount], "trustedTransfer", options.sender, options.gasPrice);
            return;
        }

        public trustedTransfer_ = async(token: string, from: string, to: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IBEP20","name":"_token","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"trustedTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [token, from, to, amount], options.sender);
            return <boolean>result[0];
        }
    }


    export class ClaimTradingProceeds extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public calculateCreatorFee_ = async(market: string, amount: BN, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"calculateCreatorFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [market, amount], options.sender);
            return <BN>result[0];
        }

        public calculateProceeds_ = async(market: string, outcome: BN, numberOfShares: BN, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numberOfShares","type":"uint256"}],"name":"calculateProceeds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [market, outcome, numberOfShares], options.sender);
            return <BN>result[0];
        }

        public claimTradingProceeds = async(market: string, shareHolder: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"}],"name":"claimTradingProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [market, shareHolder], "claimTradingProceeds", options.sender, options.gasPrice);
            return;
        }

        public claimTradingProceeds_ = async(market: string, shareHolder: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"}],"name":"claimTradingProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [market, shareHolder], options.sender);
            return <boolean>result[0];
        }

        public divideUpWinnings_ = async(market: string, outcome: BN, numberOfShares: BN, options?: { sender?: string }): Promise<Array<string>> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"internalType":"uint256","name":"_proceeds","type":"uint256"},{"internalType":"uint256","name":"_shareHolderShare","type":"uint256"},{"internalType":"uint256","name":"_creatorShare","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [market, outcome, numberOfShares], options.sender);
            return <Array<string>>result;
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }
    }


    export class CompleteSets extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public buyCompleteSets = async(sender: string, market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [sender, market, amount], "buyCompleteSets", options.sender, options.gasPrice);
            return;
        }

        public buyCompleteSets_ = async(sender: string, market: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [sender, market, amount], options.sender);
            return <boolean>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public publicBuyCompleteSets = async(market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [market, amount], "publicBuyCompleteSets", options.sender, options.gasPrice);
            return;
        }

        public publicBuyCompleteSets_ = async(market: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [market, amount], options.sender);
            return <boolean>result[0];
        }

        public publicSellCompleteSets = async(market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [market, amount], "publicSellCompleteSets", options.sender, options.gasPrice);
            return;
        }

        public publicSellCompleteSets_ = async(market: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [market, amount], options.sender);
            return <boolean>result[0];
        }

        public sellCompleteSets = async(sender: string, market: string, amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"sellCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [sender, market, amount], "sellCompleteSets", options.sender, options.gasPrice);
            return;
        }

        public sellCompleteSets_ = async(sender: string, market: string, amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"sellCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [sender, market, amount], options.sender);
            return <boolean>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }
    }


    export class Controller extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public addToWhitelist = async(target: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_target","type":"address"}],"name":"addToWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [target], "addToWhitelist", options.sender, options.gasPrice);
            return;
        }

        public addToWhitelist_ = async(target: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_target","type":"address"}],"name":"addToWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [target], options.sender);
            return <boolean>result[0];
        }

        public assertIsWhitelisted_ = async(target: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_target","type":"address"}],"name":"assertIsWhitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [target], options.sender);
            return <boolean>result[0];
        }

        public emergencyStop = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"emergencyStop","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "emergencyStop", options.sender, options.gasPrice);
            return;
        }

        public emergencyStop_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"emergencyStop","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public getAugurLite_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getAugurLite","outputs":[{"internalType":"contract IAugurLite","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getContractDetails_ = async(key: string, options?: { sender?: string }): Promise<Array<string>> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"}],"name":"getContractDetails","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [key], options.sender);
            return <Array<string>>result;
        }

        public getTimestamp_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public lookup_ = async(key: string, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"}],"name":"lookup","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [key], options.sender);
            return <string>result[0];
        }

        public onlyInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"onlyInEmergency","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public owner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public registerContract = async(key: string, address: string, bytecodeHash: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [key, address, bytecodeHash], "registerContract", options.sender, options.gasPrice);
            return;
        }

        public registerContract_ = async(key: string, address: string, bytecodeHash: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [key, address, bytecodeHash], options.sender);
            return <boolean>result[0];
        }

        public registry_ = async(arg0: string, options?: { sender?: string }): Promise<Array<string>> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"registry","outputs":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [arg0], options.sender);
            return <Array<string>>result;
        }

        public removeFromWhitelist = async(target: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_target","type":"address"}],"name":"removeFromWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [target], "removeFromWhitelist", options.sender, options.gasPrice);
            return;
        }

        public removeFromWhitelist_ = async(target: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_target","type":"address"}],"name":"removeFromWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [target], options.sender);
            return <boolean>result[0];
        }

        public stopInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"stopInEmergency","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public stopped_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"stopped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [newOwner], "transferOwnership", options.sender, options.gasPrice);
            return;
        }

        public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [newOwner], options.sender);
            return <boolean>result[0];
        }

        public whitelist_ = async(arg0: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [arg0], options.sender);
            return <boolean>result[0];
        }
    }


    export class Mailbox extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public initialize = async(owner: string, market: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [owner, market], "initialize", options.sender, options.gasPrice);
            return;
        }

        public initialize_ = async(owner: string, market: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [owner, market], options.sender);
            return <boolean>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }

        public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [newOwner], "transferOwnership", options.sender, options.gasPrice);
            return;
        }

        public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [newOwner], options.sender);
            return <boolean>result[0];
        }

        public withdrawTokens = async(token: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IBEP20","name":"_token","type":"address"}],"name":"withdrawTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [token], "withdrawTokens", options.sender, options.gasPrice);
            return;
        }

        public withdrawTokens_ = async(token: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IBEP20","name":"_token","type":"address"}],"name":"withdrawTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [token], options.sender);
            return <boolean>result[0];
        }
    }


    export class Market extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public approveSpenders = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"approveSpenders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "approveSpenders", options.sender, options.gasPrice);
            return;
        }

        public approveSpenders_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"approveSpenders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public assertBalances_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"assertBalances","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public deriveMarketCreatorFeeAmount_ = async(amount: BN, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deriveMarketCreatorFeeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [amount], options.sender);
            return <BN>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getDenominationToken_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDenominationToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getEndTime_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public getMarketCreatorMailbox_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketCreatorMailbox","outputs":[{"internalType":"contract IMailbox","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getMarketCreatorSettlementFeeDivisor_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketCreatorSettlementFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getNumTicks_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumTicks","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getNumberOfOutcomes_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumberOfOutcomes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getOracle_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOracle","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getPayoutNumerator_ = async(outcome: BN, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getPayoutNumerator","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [outcome], options.sender);
            return <BN>result[0];
        }

        public getResolutionTime_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getResolutionTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getShareToken_ = async(outcome: BN, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getShareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [outcome], options.sender);
            return <string>result[0];
        }

        public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getUniverse_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public initialize = async(universe: string, endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, creator: string, numOutcomes: BN, numTicks: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract IBEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[{"internalType":"contract IShareToken[]","name":"_shareToken","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [universe, endTime, feeDivisor, denominationToken, oracle, creator, numOutcomes, numTicks], "initialize", options.sender, options.gasPrice);
            return;
        }

        public initialize_ = async(universe: string, endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, creator: string, numOutcomes: BN, numTicks: BN, options?: { sender?: string }): Promise<Array<string>> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract IBEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[{"internalType":"contract IShareToken[]","name":"_shareToken","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [universe, endTime, feeDivisor, denominationToken, oracle, creator, numOutcomes, numTicks], options.sender);
            return <Array<string>>result[0];
        }

        public isContainerForShareToken_ = async(shadyShareToken: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IShareToken","name":"_shadyShareToken","type":"address"}],"name":"isContainerForShareToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [shadyShareToken], options.sender);
            return <boolean>result[0];
        }

        public isInvalid_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isInvalid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public isResolved_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isResolved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public resolve = async(payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"bool","name":"_invalid","type":"bool"}],"name":"resolve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [payoutNumerators, invalid], "resolve", options.sender, options.gasPrice);
            return;
        }

        public resolve_ = async(payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"bool","name":"_invalid","type":"bool"}],"name":"resolve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [payoutNumerators, invalid], options.sender);
            return <boolean>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }

        public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [newOwner], "transferOwnership", options.sender, options.gasPrice);
            return;
        }

        public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [newOwner], options.sender);
            return <boolean>result[0];
        }

        public verifyResolutionInformation_ = async(payoutNumerators: Array<BN>, invalid: boolean, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"bool","name":"_invalid","type":"bool"}],"name":"verifyResolutionInformation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [payoutNumerators, invalid], options.sender);
            return <boolean>result[0];
        }

        public withdrawInEmergency = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "withdrawInEmergency", options.sender, options.gasPrice);
            return;
        }

        public withdrawInEmergency_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"withdrawInEmergency","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }
    }


    export class ShareToken extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public _decimals_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"_decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public _name_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"_name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public _symbol_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"_symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public allowance_ = async(wner: string, pender: string, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [wner, pender], options.sender);
            return <BN>result[0];
        }

        public approve = async(pender: string, mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [pender, mount], "approve", options.sender, options.gasPrice);
            return;
        }

        public approve_ = async(pender: string, mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [pender, mount], options.sender);
            return <boolean>result[0];
        }

        public balanceOf_ = async(ccount: string, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [ccount], options.sender);
            return <BN>result[0];
        }

        public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public createShares = async(owner: string, fxpValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_fxpValue","type":"uint256"}],"name":"createShares","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [owner, fxpValue], "createShares", options.sender, options.gasPrice);
            return;
        }

        public createShares_ = async(owner: string, fxpValue: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_fxpValue","type":"uint256"}],"name":"createShares","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [owner, fxpValue], options.sender);
            return <boolean>result[0];
        }

        public decimals_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public decreaseAllowance = async(pender: string, ubtractedValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [pender, ubtractedValue], "decreaseAllowance", options.sender, options.gasPrice);
            return;
        }

        public decreaseAllowance_ = async(pender: string, ubtractedValue: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [pender, ubtractedValue], options.sender);
            return <boolean>result[0];
        }

        public destroyShares = async(owner: string, fxpValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_fxpValue","type":"uint256"}],"name":"destroyShares","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [owner, fxpValue], "destroyShares", options.sender, options.gasPrice);
            return;
        }

        public destroyShares_ = async(owner: string, fxpValue: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_fxpValue","type":"uint256"}],"name":"destroyShares","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [owner, fxpValue], options.sender);
            return <boolean>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public getMarket_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"internalType":"contract IMarket","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getOutcome_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOutcome","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public increaseAllowance = async(pender: string, ddedValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [pender, ddedValue], "increaseAllowance", options.sender, options.gasPrice);
            return;
        }

        public increaseAllowance_ = async(pender: string, ddedValue: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [pender, ddedValue], options.sender);
            return <boolean>result[0];
        }

        public initialize = async(market: string, outcome: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [market, outcome], "initialize", options.sender, options.gasPrice);
            return;
        }

        public initialize_ = async(market: string, outcome: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [market, outcome], options.sender);
            return <boolean>result[0];
        }

        public mint = async(mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [mount], "mint", options.sender, options.gasPrice);
            return;
        }

        public mint_ = async(mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [mount], options.sender);
            return <boolean>result[0];
        }

        public name_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public owner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public renounceOwnership = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "renounceOwnership", options.sender, options.gasPrice);
            return;
        }

        public renounceOwnership_ = async( options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [], options.sender);
            
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }

        public symbol_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public transfer = async(ecipient: string, mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ecipient, mount], "transfer", options.sender, options.gasPrice);
            return;
        }

        public transfer_ = async(ecipient: string, mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [ecipient, mount], options.sender);
            return <boolean>result[0];
        }

        public transferFrom = async(ender: string, ecipient: string, mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ender, ecipient, mount], "transferFrom", options.sender, options.gasPrice);
            return;
        }

        public transferFrom_ = async(ender: string, ecipient: string, mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [ender, ecipient, mount], options.sender);
            return <boolean>result[0];
        }

        public transferOwnership = async(ewOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ewOwner], "transferOwnership", options.sender, options.gasPrice);
            return;
        }

        public transferOwnership_ = async(ewOwner: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ewOwner], options.sender);
            
        }
    }


    export class TestNetDenominationToken extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public _decimals_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"_decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public _name_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"_name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public _symbol_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"_symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public allowance_ = async(wner: string, pender: string, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [wner, pender], options.sender);
            return <BN>result[0];
        }

        public approve = async(pender: string, mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [pender, mount], "approve", options.sender, options.gasPrice);
            return;
        }

        public approve_ = async(pender: string, mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [pender, mount], options.sender);
            return <boolean>result[0];
        }

        public balanceOf_ = async(ccount: string, options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [ccount], options.sender);
            return <BN>result[0];
        }

        public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public decimals_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public decreaseAllowance = async(pender: string, ubtractedValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [pender, ubtractedValue], "decreaseAllowance", options.sender, options.gasPrice);
            return;
        }

        public decreaseAllowance_ = async(pender: string, ubtractedValue: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [pender, ubtractedValue], options.sender);
            return <boolean>result[0];
        }

        public depositEther = async( options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"depositEther","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
            await this.remoteCall(abi, [], "depositEther", options.sender, options.gasPrice, options.attachedEth);
            return;
        }

        public depositEther_ = async( options?: { sender?: string, attachedEth?: BN }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"depositEther","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
            const result = await this.localCall(abi, [], options.sender, options.attachedEth);
            return <boolean>result[0];
        }

        public faucet = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [amount], "faucet", options.sender, options.gasPrice);
            return;
        }

        public faucet_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [amount], options.sender);
            return <boolean>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public increaseAllowance = async(pender: string, ddedValue: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [pender, ddedValue], "increaseAllowance", options.sender, options.gasPrice);
            return;
        }

        public increaseAllowance_ = async(pender: string, ddedValue: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [pender, ddedValue], options.sender);
            return <boolean>result[0];
        }

        public mint = async(mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [mount], "mint", options.sender, options.gasPrice);
            return;
        }

        public mint_ = async(mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [mount], options.sender);
            return <boolean>result[0];
        }

        public name_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public owner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public renounceOwnership = async( options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [], "renounceOwnership", options.sender, options.gasPrice);
            return;
        }

        public renounceOwnership_ = async( options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [], options.sender);
            
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }

        public symbol_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public totalSupply_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public transfer = async(ecipient: string, mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ecipient, mount], "transfer", options.sender, options.gasPrice);
            return;
        }

        public transfer_ = async(ecipient: string, mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [ecipient, mount], options.sender);
            return <boolean>result[0];
        }

        public transferFrom = async(ender: string, ecipient: string, mount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ender, ecipient, mount], "transferFrom", options.sender, options.gasPrice);
            return;
        }

        public transferFrom_ = async(ender: string, ecipient: string, mount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [ender, ecipient, mount], options.sender);
            return <boolean>result[0];
        }

        public transferOwnership = async(ewOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [ewOwner], "transferOwnership", options.sender, options.gasPrice);
            return;
        }

        public transferOwnership_ = async(ewOwner: string, options?: { sender?: string }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.localCall(abi, [ewOwner], options.sender);
            
        }

        public withdrawEther = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawEther","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [amount], "withdrawEther", options.sender, options.gasPrice);
            return;
        }

        public withdrawEther_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawEther","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [amount], options.sender);
            return <boolean>result[0];
        }

        public withdrawEtherInternal = async(from: string, to: string, amount: BN, options?: { sender?: string, gasPrice?: BN, attachedEth?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawEtherInternal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
            await this.remoteCall(abi, [from, to, amount], "withdrawEtherInternal", options.sender, options.gasPrice, options.attachedEth);
            return;
        }

        public withdrawEtherInternal_ = async(from: string, to: string, amount: BN, options?: { sender?: string, attachedEth?: BN }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawEtherInternal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"};
            const result = await this.localCall(abi, [from, to, amount], options.sender, options.attachedEth);
            return <boolean>result[0];
        }
    }


    export class Time extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getTimestamp_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }
    }


    export class TimeControlled extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getOwner_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getTimestamp_ = async( options?: { sender?: string }): Promise<BN> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <BN>result[0];
        }

        public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public incrementTimestamp = async(amount: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [amount], "incrementTimestamp", options.sender, options.gasPrice);
            return;
        }

        public incrementTimestamp_ = async(amount: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [amount], options.sender);
            return <boolean>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }

        public setTimestamp = async(timestamp: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [timestamp], "setTimestamp", options.sender, options.gasPrice);
            return;
        }

        public setTimestamp_ = async(timestamp: BN, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [timestamp], options.sender);
            return <boolean>result[0];
        }

        public transferOwnership = async(newOwner: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [newOwner], "transferOwnership", options.sender, options.gasPrice);
            return;
        }

        public transferOwnership_ = async(newOwner: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [newOwner], options.sender);
            return <boolean>result[0];
        }
    }


    export class Universe extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public createCategoricalMarket = async(endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, outcomes: Array<string>, topic: string, description: string, extraInfo: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"},{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [endTime, feeDivisor, denominationToken, oracle, outcomes, topic, description, extraInfo], "createCategoricalMarket", options.sender, options.gasPrice);
            return;
        }

        public createCategoricalMarket_ = async(endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, outcomes: Array<string>, topic: string, description: string, extraInfo: string, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"},{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [endTime, feeDivisor, denominationToken, oracle, outcomes, topic, description, extraInfo], options.sender);
            return <string>result[0];
        }

        public createScalarMarket = async(endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, minPrice: BN, maxPrice: BN, numTicks: BN, topic: string, description: string, extraInfo: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"int256","name":"_minPrice","type":"int256"},{"internalType":"int256","name":"_maxPrice","type":"int256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"},{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [endTime, feeDivisor, denominationToken, oracle, minPrice, maxPrice, numTicks, topic, description, extraInfo], "createScalarMarket", options.sender, options.gasPrice);
            return;
        }

        public createScalarMarket_ = async(endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, minPrice: BN, maxPrice: BN, numTicks: BN, topic: string, description: string, extraInfo: string, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"int256","name":"_minPrice","type":"int256"},{"internalType":"int256","name":"_maxPrice","type":"int256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"},{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [endTime, feeDivisor, denominationToken, oracle, minPrice, maxPrice, numTicks, topic, description, extraInfo], options.sender);
            return <string>result[0];
        }

        public createYesNoMarket = async(endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, topic: string, description: string, extraInfo: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [endTime, feeDivisor, denominationToken, oracle, topic, description, extraInfo], "createYesNoMarket", options.sender, options.gasPrice);
            return;
        }

        public createYesNoMarket_ = async(endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, topic: string, description: string, extraInfo: string, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"bytes32","name":"_topic","type":"bytes32"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [endTime, feeDivisor, denominationToken, oracle, topic, description, extraInfo], options.sender);
            return <string>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getDenominationToken_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDenominationToken","outputs":[{"internalType":"contract IBEP20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getInitialized_ = async( options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <boolean>result[0];
        }

        public getTypeName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public initialize = async(denominationToken: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_denominationToken","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [denominationToken], "initialize", options.sender, options.gasPrice);
            return;
        }

        public initialize_ = async(denominationToken: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_denominationToken","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [denominationToken], options.sender);
            return <boolean>result[0];
        }

        public isContainerForMarket_ = async(shadyMarket: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_shadyMarket","type":"address"}],"name":"isContainerForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [shadyMarket], options.sender);
            return <boolean>result[0];
        }

        public isContainerForShareToken_ = async(shadyShareToken: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IShareToken","name":"_shadyShareToken","type":"address"}],"name":"isContainerForShareToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [shadyShareToken], options.sender);
            return <boolean>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }
    }


    export class MailboxFactory extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public createMailbox = async(controller: string, owner: string, market: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"createMailbox","outputs":[{"internalType":"contract IMailbox","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller, owner, market], "createMailbox", options.sender, options.gasPrice);
            return;
        }

        public createMailbox_ = async(controller: string, owner: string, market: string, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"createMailbox","outputs":[{"internalType":"contract IMailbox","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller, owner, market], options.sender);
            return <string>result[0];
        }
    }


    export class MarketFactory extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public createMarket = async(controller: string, universe: string, endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, sender: string, numOutcomes: BN, numTicks: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller, universe, endTime, feeDivisor, denominationToken, oracle, sender, numOutcomes, numTicks], "createMarket", options.sender, options.gasPrice);
            return;
        }

        public createMarket_ = async(controller: string, universe: string, endTime: BN, feeDivisor: BN, denominationToken: string, oracle: string, sender: string, numOutcomes: BN, numTicks: BN, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feeDivisor","type":"uint256"},{"internalType":"contract BEP20","name":"_denominationToken","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller, universe, endTime, feeDivisor, denominationToken, oracle, sender, numOutcomes, numTicks], options.sender);
            return <string>result[0];
        }
    }


    export class ShareTokenFactory extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public createShareToken = async(controller: string, market: string, outcome: BN, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"createShareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller, market, outcome], "createShareToken", options.sender, options.gasPrice);
            return;
        }

        public createShareToken_ = async(controller: string, market: string, outcome: BN, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"createShareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller, market, outcome], options.sender);
            return <string>result[0];
        }
    }


    export class UniverseFactory extends Contract {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public createUniverse = async(controller: string, denominationToken: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"address","name":"_denominationToken","type":"address"}],"name":"createUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller, denominationToken], "createUniverse", options.sender, options.gasPrice);
            return;
        }

        public createUniverse_ = async(controller: string, denominationToken: string, options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"},{"internalType":"address","name":"_denominationToken","type":"address"}],"name":"createUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller, denominationToken], options.sender);
            return <string>result[0];
        }
    }


    export class Delegator extends Controlled {
        public constructor(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN) {
            super(connector, accountManager, address, defaultGasPrice);
        }

        public controllerLookupName_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public getController_ = async( options?: { sender?: string }): Promise<string> => {
            options = options || {};
            const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getController","outputs":[{"internalType":"contract IController","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"};
            const result = await this.localCall(abi, [], options.sender);
            return <string>result[0];
        }

        public setController = async(controller: string, options?: { sender?: string, gasPrice?: BN }): Promise<void> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            await this.remoteCall(abi, [controller], "setController", options.sender, options.gasPrice);
            return;
        }

        public setController_ = async(controller: string, options?: { sender?: string }): Promise<boolean> => {
            options = options || {};
            const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IController","name":"_controller","type":"address"}],"name":"setController","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"};
            const result = await this.localCall(abi, [controller], options.sender);
            return <boolean>result[0];
        }
    }

    export function ContractFactory(connector: Connector, accountManager: AccountManager, address: string, defaultGasPrice: BN): Controlled {
        return new Controlled(connector, accountManager, address, defaultGasPrice);
    }
    